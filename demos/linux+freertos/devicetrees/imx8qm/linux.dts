/dts-v1/;

/ {   
	#size-cells = <0x2>;
	#address-cells = <0x2>;

	cpus {
		#size-cells = <0x0>;
		#address-cells = <0x1>;

		cpu@0 {
			compatible = "arm,armv8";
			device_type = "cpu";
			enable-method = "psci";
			reg = <0x0>;
		};

		cpu@1 {
			compatible = "arm,armv8";
			device_type = "cpu";
			enable-method = "psci";
			reg = <0x1>;
		};

		cpu@2 {
			reg = <0x2>;
			compatible = "arm,armv8";
			device_type = "cpu";
			enable-method = "psci";
		};

		cpu@3 {
			reg = <0x3>;
			compatible = "arm,armv8";
			device_type = "cpu";
			enable-method = "psci";
		};

		cpu@4 {
			compatible = "arm,armv8";
			device_type = "cpu";
			reg = <0x4>;
			enable-method = "psci";
		};

	};

	psci {
		compatible = "arm,psci-0.2";
		method = "smc";
	};


	memory@80200000 {
		reg = <0x0 0x80200000 0x0 0x20000000>;
		device_type = "memory";
	};

	gic: intc@8000000 {
		interrupts = <0x01 0x09 0x04>;
		reg = <0x00 0x51a00000 0x00 0x10000 0x00 0x51b00000 0x00 0xf60000>;
		#redistributor-regions = <0x01>;
		compatible = "arm,gic-v3";
		interrupt-controller;
		#interrupt-cells = <0x03>;
        interrupt-parent = <&gic>;
	};

   	timer {
		compatible = "arm,armv8-timer";
		interrupt-parent = <&gic>;
		interrupts = <0x1 0xd 0xf08 0x1 0xe 0xf08 0x1 0xb 0xf08 0x1 0xa 0xf08>;
	};

	conn_axi_clk: clock-conn-axi {
		compatible = "fixed-clock";
		#clock-cells = <0>;
		clock-frequency = <333333333>;
		clock-output-names = "conn_axi_clk";
	};

	conn_ipg_clk: clock-conn-ipg {
		compatible = "fixed-clock";
		#clock-cells = <0>;
		clock-frequency = <83333333>;
		clock-output-names = "conn_ipg_clk";
	};

	xtal32k: clock-xtal32k {
		compatible = "fixed-clock";
		#clock-cells = <0>;
		clock-frequency = <32768>;
		clock-output-names = "xtal_32KHz";
	};

	xtal24m: clock-xtal24m {
		compatible = "fixed-clock";
		#clock-cells = <0>;
		clock-frequency = <24000000>;
		clock-output-names = "xtal_24MHz";
	};

	/**
	 * We are assigning a mu to the linux guest because the linux drivers 
	 * assume linux can directly interact with the SCU to configure its devices.
	 * Therefore, this guest will be able to configure peripherals not assigned
	 * to it, as for example, the lpuart0 used by the hypervisor and possibly
	 * other guests. In the future we will have to either to move the cores 
	 * belonging to this guest to a separate scfw partition or paravirtualise 
	 * the MU1 and interpose the guest's communcation to the SCU, to limit 
	 * which resource it might configure.
	 */ 
	lsio_mu1: mailbox@5d1c0000 {
		compatible = "fsl,imx8qm-mu", "fsl,imx6sx-mu";
		reg = <0x0 0x5d1c0000 0x0 0x10000>;
		interrupt-parent = <&gic>;
		interrupts = <0 177 4>;
		#mbox-cells = <2>;
		status = "okay";
	};

	scu {
		compatible = "fsl,imx-scu";

		mbox-names = "tx0", "tx1", "tx2", "tx3",
			     "rx0", "rx1", "rx2", "rx3",
			     "gip3";

		mboxes = <&lsio_mu1 0 0
			  &lsio_mu1 0 1
			  &lsio_mu1 0 2
			  &lsio_mu1 0 3
			  &lsio_mu1 1 0
			  &lsio_mu1 1 1
			  &lsio_mu1 1 2
			  &lsio_mu1 1 3
			  &lsio_mu1 3 3>;

		pd: imx8qx-pd {
			compatible = "fsl,imx8qm-scu-pd", "fsl,scu-pd";
			#power-domain-cells = <1>;
		};

		clk: clock-controller {
			compatible = "fsl,imx8qm-clk", "fsl,scu-clk";
			#clock-cells = <2>;
			clocks = <&xtal32k &xtal24m>;
			clock-names = "xtal_32KHz", "xtal_24Mhz";
		};

		iomuxc: pinctrl {
			compatible = "fsl,imx8qm-iomuxc";
			pinctrl-names = "default";
			
			pinctrl_fec1: fec1grp {
				fsl,pins = <0xff 0x00 0x14a0 
				0xa6 0x00 0x6000020 
				0xa5 0x00 0x6000020 
				0xf4 0x00 0x6000020 
				0xf3 0x00 0x6000020 
				0xf5 0x00 0x6000020 
				0xf6 0x00 0x6000020 
				0xf7 0x00 0x6000020 
				0xf8 0x00 0x6000020 
				0xf9 0x00 0x6000020 
				0xfa 0x00 0x6000020 
				0xfb 0x00 0x6000020 
				0xfc 0x00 0x6000020 
				0xfd 0x00 0x6000020 
				0xfe 0x00 0x6000020>;
			};
		};

		ocotp: imx8qm-ocotp {
			compatible = "fsl,imx8qm-scu-ocotp";
			#address-cells = <1>;
			#size-cells = <1>;
			read-only;

			fec_mac0: mac@1c4 {
				reg = <0x1c4 6>;
			};

			fec_mac1: mac@1c6 {
				reg = <0x1c6 6>;
			};
		};
	};

	enet0_lpcg: clock-controller@5b230000 {
		compatible = "fsl,imx8qxp-lpcg";
		reg = <0x0 0x5b230000 0x0 0x10000>;
		#clock-cells = <1>;
		clocks = <&clk 251 2>,
			 <&clk 251 2>,
			 <&conn_axi_clk>,
			 <&clk 251 24>,
			 <&conn_ipg_clk>,
			 <&conn_ipg_clk>;
		bit-offset = <0 4 8 12 16 20>;
		clock-output-names = "enet0_lpcg_timer_clk",
				     "enet0_lpcg_txc_sampling_clk",
				     "enet0_lpcg_ahb_clk",
				     "enet0_lpcg_rgmii_txc_clk",
				     "enet0_lpcg_ipg_clk",
				     "enet0_lpcg_ipg_s_clk";
		power-domains = <&pd 251>;
	};

	fec1: ethernet@5b040000 {
		compatible = "fsl,imx8qm-fec", "fsl,imx6sx-fec";
		reg = <0x0 0x5b040000 0x0 0x10000>;
		interrupt-parent = <&gic>;
		interrupts = <0 258 4>,
			     <0 256 4>,
			     <0 257 4>,
			     <0 259 4>;
		clocks = <&enet0_lpcg 4>,
			 <&enet0_lpcg 2>,
			 <&enet0_lpcg 3>,
			 <&enet0_lpcg 0>,
			 <&enet0_lpcg 1>;
		clock-names = "ipg", "ahb", "enet_clk_ref", "ptp", "enet_2x_txclk";
		status = "okay";

		assigned-clocks = <&clk 251 2>,
				  <&clk 251 25>;
		assigned-clock-rates = <250000000>, <125000000>;
		fsl,num-tx-queues=<3>;
		fsl,num-rx-queues=<3>;
		power-domains = <&pd 251>;

		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_fec1>;
		phy-mode = "rgmii";
		phy-handle = <&ethphy0>;
		fsl,magic-packet;
		nvmem-cells = <&fec_mac0>;
		nvmem-cell-names = "mac-address";
		fsl,rgmii_rxc_dly;
		fsl,rgmii_txc_dly;
		
		mdio {
			#address-cells = <1>;
			#size-cells = <0>;

			ethphy0: ethernet-phy@0 {
				compatible = "ethernet-phy-ieee802.3-c22";
				reg = <0>;
				at803x,eee-disabled;
				at803x,vddio-1p8v;
				status = "okay";
			};
		};
	};

    bao-ipc@f0000000 {
        compatible = "bao,ipcshmem";
        reg = <0x0 0xf0000000 0x0 0x00010000>;
		read-channel = <0x0 0x2000>;
		write-channel = <0x2000 0x2000>;
        interrupts = <0 20 1>;
		interrupt-parent = <&gic>;
		id = <0>;
    };

	/**
	 * The purpose of this dummy lpuart node is for linux not turning off the 
	 * lpuart that is in use by the hypervisor and possibly other guest. 
	 * By assigning it to the stdout-path in /chosen, the linux pd driver will
	 * leave it be and not turn it off. As explained previsouly, this is just
	 * for demonstration purposes and in the future this power resource controls
	 * will either be blocked by placing linux and its resources in their own
	 * scfw partition or by having SCU interactions mediated by the hypervisor.
	 */
	lpuart0_dummy: lpuart0 {
		power-domains = <&pd 57>;
	};

	aliases {
		ethernet0 = &fec1;
	};

	chosen {
		bootargs = "clk_ignore_unused ip=192.168.42.15 carrier_timeout=0";
		stdout-path = &lpuart0_dummy;
	};
};
